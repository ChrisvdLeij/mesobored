{"remainingRequest":"/Users/cleij/Desktop/meSoBored/mesobored/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cleij/Desktop/meSoBored/mesobored/src/components/HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css&","dependencies":[{"path":"/Users/cleij/Desktop/meSoBored/mesobored/src/components/HelloWorld.vue","mtime":1559761697494},{"path":"/Users/cleij/Desktop/meSoBored/mesobored/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/cleij/Desktop/meSoBored/mesobored/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/cleij/Desktop/meSoBored/mesobored/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/cleij/Desktop/meSoBored/mesobored/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cleij/Desktop/meSoBored/mesobored/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n",{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div class=\"hello\">\n  <div v-if=\"isLoading\">\n    Loading\n  </div>\n  <div v-else>\n\n    <h1>\n      {{ getactivity }}\n    </h1>\n\n    <!-- http://www.boredapi.com/api/activity?{{getAloneQuery}}&{{getFreeQuery}}&{{getGroupQuery}} -->\n\n    <div v-for=\"(filter, index) in filters\" :key=\"index\" style=\"display: inline-flex\">\n      <input :type=\"typeFilter(filter)\" :name=\"filter.group\" :value=\"filter.name\" @input=\"onChange($event, filter)\" /> <label style=\"margin: 0 10px\">{{filter.name}}</label>\n    </div>\n    <br />\n    <br />\n    <button class=\"btn\" @click=\"fetch\">Gimme something to do</button>\n\n    <div v-if=\"errors.length\">\n      {{ errors }}\n    </div>\n  </div>\n</div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'HelloWorld',\n\n  data() {\n    return {\n      isLoading: false,\n      introText: 'Push the button',\n      data: [],\n      errors: [],\n      filters: {\n        'alone': {\n          'name': 'alone',\n          'checked': false,\n          'query': 'participants=1',\n          'group': 'participants'\n        },\n        'group': {\n          'name': 'group',\n          'checked': false,\n          'query': 'minparticipants=3',\n          'group': 'participants'\n        },\n        'free': {\n          'name': 'free',\n          'checked': false,\n          'query': 'price=0.0'\n        }\n      }\n    }\n  },\n\n  computed: {\n    getactivity() {\n      if (this.data.activity) {\n        return this.data.activity\n      }\n\n      return this.introText;\n    },\n\n    getFreeQuery() {\n      if (this.filters.free.checked) {\n        return this.filters.free.query;\n      }\n\n      return '';\n    },\n\n    getGroupQuery() {\n      if (this.filters.group.checked) {\n        return this.filters.group.query;\n      }\n\n      return '';\n    },\n\n    getAloneQuery() {\n      if (this.filters.alone.checked) {\n        return this.filters.alone.query;\n      }\n\n      return '';\n    }\n  },\n\n  methods: {\n    fetch() {\n      this.loading = true;\n      axios.get(`http://www.boredapi.com/api/activity?${this.getAloneQuery}&${this.getFreeQuery}&${this.getGroupQuery}`)\n        .then(response => {\n          this.data = response.data\n          this.loading = false;\n\n        })\n        .catch(e => {\n          this.errors.push(e)\n        });\n    },\n\n    onChange($event, clickedFilter) {\n      const status = $event.target.checked;\n\n      // loop over filters and set all checked properties too false\n      for (const filter in this.filters) {\n        if(this.filters[filter].group === clickedFilter.group){\n            this.filters[filter].checked = false;\n        }\n      }\n\n      clickedFilter.checked = status;\n    },\n\n    typeFilter(filter) {\n      if (filter.group) {\n        return 'radio'\n      }\n      return 'checkbox'\n    }\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n"]}]}